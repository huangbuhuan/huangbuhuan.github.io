<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HuangBuhuan&#39;s Blog</title>
    <link>https://blog.buhuan.me/</link>
    
    <atom:link href="https://blog.buhuan.me/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sat, 26 Aug 2023 03:34:44 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>go语言学习笔记二</title>
      <link>https://blog.buhuan.me/2023/08/24/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</link>
      <guid>https://blog.buhuan.me/2023/08/24/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/</guid>
      <pubDate>Thu, 24 Aug 2023 13:30:37 GMT</pubDate>
      
      <description>golang语言数组、切片、map等</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接上文继续说一下go的其他语法特性</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>go语言的数组索引从0开始，声明一个数组需要初始化数组长度，而且go的数组是值类型，再赋值时等于做了一次内存拷贝，正因为如此在传递数组给函数时可以使用数组指针传递。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a [5]int</span><br><span class="line">a := [5]int</span><br><span class="line">a := [5]int &#123;1,2,3,4,5&#125;</span><br><span class="line">b := a</span><br><span class="line">b[0] = 5</span><br><span class="line">fmt.Println(a)</span><br></pre></td></tr></table></figure><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>go中的切片是数组的引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a []int &#123;1,2,3,4&#125;</span><br><span class="line">var b [5]int &#123;1,2,3,4,5&#125;</span><br><span class="line">c := b[:]</span><br><span class="line">d := make([]int, 5)</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>go中的map和java相比有特殊的语法糖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a := make(map[string]int)</span><br><span class="line">a[&quot;a&quot;] = 1</span><br><span class="line">delete(a, &quot;a&quot;)</span><br><span class="line"></span><br><span class="line">for k, v : range a &#123;</span><br><span class="line">    fmt.Println(k, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.buhuan.me/categories/golang/">golang</category>
      
      
      <category domain="https://blog.buhuan.me/tags/golang/">golang</category>
      
      <category domain="https://blog.buhuan.me/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <comments>https://blog.buhuan.me/2023/08/24/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>mac ssh报错SSH no matching host key type found</title>
      <link>https://blog.buhuan.me/2023/08/24/ssh%E6%8A%A5%E9%94%99/</link>
      <guid>https://blog.buhuan.me/2023/08/24/ssh%E6%8A%A5%E9%94%99/</guid>
      <pubDate>Thu, 24 Aug 2023 07:34:37 GMT</pubDate>
      
      <description>ssh报错处理</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>修改~&#x2F;.ssh&#x2F;config</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host xxx.buhuan.me</span><br><span class="line">  HostName xxx.buhuan.me</span><br><span class="line">  User xxxx</span><br><span class="line">  Port 2222</span><br><span class="line">  HostKeyAlgorithms +ssh-rsa</span><br><span class="line">  PubkeyAcceptedKeyTypes +ssh-rsa</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.openssh.com/txt/release-8.7">ssh-release</a></p>]]></content:encoded>
      
      
      <category domain="https://blog.buhuan.me/categories/mac/">mac</category>
      
      
      <category domain="https://blog.buhuan.me/tags/ssh/">ssh</category>
      
      <category domain="https://blog.buhuan.me/tags/mac/">mac</category>
      
      
      <comments>https://blog.buhuan.me/2023/08/24/ssh%E6%8A%A5%E9%94%99/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>go语言学习笔记</title>
      <link>https://blog.buhuan.me/2023/08/23/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</link>
      <guid>https://blog.buhuan.me/2023/08/23/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/</guid>
      <pubDate>Wed, 23 Aug 2023 13:30:37 GMT</pubDate>
      
      <description>前言
之前学习过一遍golang，过了好几年忘的差不多了，现在重新捡起来。

package
每个go程序都是以main包开始运行。

1
2
3
4
5


package main

func main() {

}


import和imports
import导入一个包，imports导入多个。

1
2
3
4
5


import &quot;fmt&quot;
imports (
    &quot;fmt&quot;
    &quot;time&quot;
)


导出名
go的内部属性使用大小写控制访问权限如，math.Pi的P是大写的，外部函数可以访问

函数
go函数格式为func 名称(参数列表) 返回值

1
2
3


f</description>
      
      
      
      <content:encoded><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前学习过一遍golang，过了好几年忘的差不多了，现在重新捡起来。</p><h2 id="package"><a href="#package" class="headerlink" title="package"></a>package</h2><p>每个go程序都是以main包开始运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import和imports"><a href="#import和imports" class="headerlink" title="import和imports"></a>import和imports</h2><p><code>import</code>导入一个包，<code>imports</code>导入多个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br><span class="line">imports (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;time&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="导出名"><a href="#导出名" class="headerlink" title="导出名"></a>导出名</h2><p>go的内部属性使用大小写控制访问权限如，math.Pi的P是大写的，外部函数可以访问</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>go函数格式为func 名称(参数列表) 返回值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func add(x int, y int) int&#123;</span><br><span class="line">    return x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h2><p>go和java不同可以使用多个返回值, 这相当多便利</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">func swap(x string, y string) (string, string) &#123;</span><br><span class="line">    return y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    a, b := swap(&quot;world&quot;, &quot;hello&quot;)</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连续声明变量"><a href="#连续声明变量" class="headerlink" title="连续声明变量"></a>连续声明变量</h2><p>可以使用var连续声明变量，变量的类型放在末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a, b, c bool</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    var d, f int</span><br><span class="line">    fmt.Println(a, b, c, d, f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连续初始化变量"><a href="#连续初始化变量" class="headerlink" title="连续初始化变量"></a>连续初始化变量</h2><p>使用var声明变量后在对参数赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a, b int = 1, 2</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="赋值和声明变量"><a href="#赋值和声明变量" class="headerlink" title="赋值和声明变量"></a>赋值和声明变量</h2><p>var可以使用在函数之外声明变量, :&#x3D;只能在函数内对函数赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    var a, b int = 1, 2</span><br><span class="line">    c := 3</span><br><span class="line">    fmt.Println(a, b, c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>golang的类型还是挺多细分为以下几种</p><p>布尔类型：bool<br>字符串类型：string<br>有符号整数数：int、int8、int16、int32、int64、<br>无符号整数：unit、unit8、unit16、unit32、unit64、unitptr<br>ASCII字符：byte<br>utf-8字符：rune<br>浮点型：float32、float64<br>复数类型：complex64、complex128</p><h2 id="初始值"><a href="#初始值" class="headerlink" title="初始值"></a>初始值</h2><p>golang与java不同，基础类型不需要赋值都有初始值，不像java中的对象类型初始为null，基本类型才有初始值</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>golang的类型转换使用的python的差不多，使用如’类型()’形式转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a, y int = 3, 4</span><br><span class="line">var f float64 = float64(a + y)</span><br></pre></td></tr></table></figure><h2 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h2><p>Java10中才有的功能还得用var声明，go中不需要对变量声明类型使用:&#x3D;直接赋值对象</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>go的常量使用的是const这和javascript是一样的，又得吐槽一下java声明一个常量是多么的麻烦，算了能用就行。</p><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><p>和java不同的是go中的for循环不需要使用()，但是{}是必须的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><p>同for循环也是不需要()需要{}</p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><p>go中的switch语句自动提供了break，切条件可以使用表达式</p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>defer语句会将声明的语句推迟到函数结束后执行，和java中AOP的after相似</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    defer fmt.Println(&quot;world&quot;)</span><br><span class="line">    fmt.Println(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer栈"><a href="#defer栈" class="headerlink" title="defer栈"></a>defer栈</h2><p>defer栈用来写框架可能比较合适例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">var before func()</span><br><span class="line">var after func()</span><br><span class="line"></span><br><span class="line">func execute(x, y int) int &#123;</span><br><span class="line">before()</span><br><span class="line">defer after()</span><br><span class="line">fmt.Println(&quot;execute&quot;)</span><br><span class="line">return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">before = func() &#123;</span><br><span class="line">fmt.Println(&quot;Before&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">after = func() &#123;</span><br><span class="line">fmt.Println(&quot;After&quot;)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(execute(1, 2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://blog.buhuan.me/categories/golang/">golang</category>
      
      
      <category domain="https://blog.buhuan.me/tags/golang/">golang</category>
      
      <category domain="https://blog.buhuan.me/tags/%E7%AC%94%E8%AE%B0/">笔记</category>
      
      
      <comments>https://blog.buhuan.me/2023/08/23/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
