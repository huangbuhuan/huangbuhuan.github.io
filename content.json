{"posts":[{"title":"go语言学习笔记","text":"前言之前学习过一遍golang，过了好几年忘的差不多了，现在重新捡起来。 package每个go程序都是以main包开始运行。 12345package mainfunc main() {} import和importsimport导入一个包，imports导入多个。 12345import &quot;fmt&quot;imports ( &quot;fmt&quot; &quot;time&quot;) 导出名go的内部属性使用大小写控制访问权限如，math.Pi的P是大写的，外部函数可以访问 函数go函数格式为func 名称(参数列表) 返回值 123func add(x int, y int) int{ return x + y} 多返回值go和java不同可以使用多个返回值, 这相当多便利 12345678func swap(x string, y string) (string, string) { return y, x}func main() { a, b := swap(&quot;world&quot;, &quot;hello&quot;) fmt.Println(a, b)} 连续声明变量可以使用var连续声明变量，变量的类型放在末尾 123456var a, b, c boolfunc main() { var d, f int fmt.Println(a, b, c, d, f)} 连续初始化变量使用var声明变量后在对参数赋值 12345var a, b int = 1, 2func main() { fmt.Println(a, b)} 赋值和声明变量var可以使用在函数之外声明变量, :=只能在函数内对函数赋值 12345func main() { var a, b int = 1, 2 c := 3 fmt.Println(a, b, c))} 基本类型golang的类型还是挺多细分为以下几种 布尔类型：bool字符串类型：string有符号整数数：int、int8、int16、int32、int64、无符号整数：unit、unit8、unit16、unit32、unit64、unitptrASCII字符：byteutf-8字符：rune浮点型：float32、float64复数类型：complex64、complex128 初始值golang与java不同，基础类型不需要赋值都有初始值，不像java中的对象类型初始为null，基本类型才有初始值 类型转换golang的类型转换使用的python的差不多，使用如’类型()’形式转换 12var a, y int = 3, 4var f float64 = float64(a + y) 类型推导Java10中才有的功能还得用var声明，go中不需要对变量声明类型使用:=直接赋值对象 常量go的常量使用的是const这和javascript是一样的，又得吐槽一下java声明一个常量是多么的麻烦，算了能用就行。 for循环和java不同的是go中的for循环不需要使用()，但是{}是必须的 123for i := 0; i &lt; 10; i++ { fmt.Println(i)} if语句同for循环也是不需要()需要{} switch语句go中的switch语句自动提供了break，切条件可以使用表达式 deferdefer语句会将声明的语句推迟到函数结束后执行，和java中AOP的after相似 1234func main() { defer fmt.Println(&quot;world&quot;) fmt.Println(&quot;hello&quot;)} defer栈defer栈用来写框架可能比较合适例 123456789101112131415161718192021222324package mainimport &quot;fmt&quot;var before func()var after func()func execute(x, y int) int { before() defer after() fmt.Println(&quot;execute&quot;) return x + y}func main() { before = func() { fmt.Println(&quot;Before&quot;) } after = func() { fmt.Println(&quot;After&quot;) } fmt.Println(execute(1, 2))}","link":"/2023/08/23/go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"golang","slug":"golang","link":"/tags/golang/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"}],"categories":[{"name":"golang","slug":"golang","link":"/categories/golang/"}],"pages":[]}